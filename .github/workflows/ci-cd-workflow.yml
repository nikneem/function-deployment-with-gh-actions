name: Function App Deployment
on:
  push:
    branches: [main]

env:
  FUNCTIONS_PATH: "Demo.FunctionsApp"
  FUNCTIONS_PROJECT: "Demo.FunctionsApp.csproj"

jobs:
  versionize:
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.gitversion.outputs.MajorMinorPatch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: "5.x"
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          useConfigFile: true

  compile-solution:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Restore dependencies
        run: dotnet restore ./src
      - name: Build
        run: dotnet build ./src --no-restore
      - name: Test
        run: dotnet test ./src --no-build --nologo --collect:"XPlat Code Coverage" --results-directory ./coverage
      # - name: Code Coverage Report
      #   uses: irongut/CodeCoverageSummary@v1.3.0
      #   with:
      #     filename: coverage/**/coverage.cobertura.xml
      #     badge: true
      #     fail_below_min: false
      #     format: markdown
      #     hide_branch_rate: false
      #     hide_complexity: true
      #     indicators: true
      #     output: both
      #     thresholds: "20 80"

  publish-functions:
    runs-on: ubuntu-latest
    needs: versionize
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.0.x"
      - name: Restore packages
        working-directory: src
        run: dotnet restore
      - name: Publish functions app
        working-directory: src
        run: dotnet publish $FUNCTIONS_PATH/$FUNCTIONS_PROJECT -c Release --no-restore -o functionsout /p:Version=${{needs.versionize.outputs.semver}}
      - name: Upload functions artifact
        uses: actions/upload-artifact@v3
        with:
          name: player-functions
          path: src/functionsout/*

  publish-bicep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Compile infrastructure
        uses: Azure/cli@v1
        with:
          inlineScript: az bicep build --file ./infrastructure/main.bicep
      - name: Publish Artifact
        uses: actions/upload-artifact@v3
        with:
          name: bicep-templates
          path: infrastructure/*.json

  deploy-infrastructure-prod:
    runs-on: ubuntu-latest
    needs: [publish-bicep, compile-solution]
    outputs:
      targetResourceGroupName: ${{ steps.armdeployprod.outputs.targetResourceGroupName }}
      functionResourceName: ${{ steps.armdeployprod.outputs.functionResourceName }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: bicep-templates
      - uses: azure/login@v1
        name: Azure Login
        with:
          creds: ${{secrets.AZURE_PROD}}
      - uses: azure/arm-deploy@v1
        id: armdeployprod
        name: Deploy infrastructure
        with:
          scope: subscription
          region: northeurope
          template: main.json
          parameters: main.prod.json
          deploymentName: FunctionsDemoProd

  deploy-function-app:
    runs-on: ubuntu-latest
    needs: [publish-functions, deploy-infrastructure-prod]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: player-functions
          path: function
      - uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_PROD}}
      - name: Deploy Azure Functions app
        uses: Azure/functions-action@v1
        with:
          app-name: ${{needs.deploy-infrastructure-prod.outputs.functionResourceName}}
          package: function
